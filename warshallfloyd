#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Jun 21 22:17:55 2020

@author: masayamatu
"""

from decimal import *
import math
import itertools
from functools import reduce
from operator import xor
import array

INF = 1000000

class WarshallFloyd(object):
    def __init__(self,max_v,pairs):
      self.max_v = max_v
      self.min_dist = [array.array(
              "I",(INF for _ in range(max_v)))for _ in range(max_v)]
      for i in range(max_v):
          self.min_dist[i][i] = 0
      
      for i,j in pairs:
          self.min_dist[i][j] = 1
          self.min_dist[j][i] = 1
    def compute(self):
        for k,i,j in itertools.product(range(self.max_v),repeat=3):
            self.min_dist[i][j] = min(self.min_dist[i][j],self.min_dist[i][k]+
            self.min_dist[k][j])
    def solve(self):
        self.compute()
        answer = array.array("B",(0 for _ in range(self.max_v)))
        for i,j in itertools.product(range(self.max_v),repeat=2):
            if self.min_dist[i][j] == 2:
                answer[i] += 1
        return answer
def main():
    n,m = map(int,input().split())
    pairs = [tuple(map(lambda x : int(x)-1,input().split())) for _ in range(m)]
    wf = WarshallFloyd(n,pairs)
    for x in wf.solve():
        print(x)
if __name__ == '__main__':
   main()